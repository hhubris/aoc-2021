package day11

import (
	"fmt"
	"github.com/google/go-cmp/cmp"
	"testing"
)

func TestSimpleFlashes(t *testing.T) {
	v1 := []byte(`11111
19991
19191
19991
11111`)

	v2 := []byte(`34543
40004
50005
40004
34543`)

	v3 := []byte(`45654
51115
61116
51115
45654`)

	d, _ := ParseData(v1)
	step1, _ := ParseData(v2)
	step2, _ := ParseData(v3)

	for i, s := range [][][]cell{step1, step2} {
		t.Run(fmt.Sprintf("step %d", i+1), func(t *testing.T) {
			RunStep(d)
			if !cmp.Equal(d, s, cmp.AllowUnexported(cell{})) {
				t.Errorf(cmp.Diff(step1, d, cmp.AllowUnexported(cell{})))
			}
		})
	}

	//for i := 0; i < len(init); i++ {
	//	fmt.Printf("%#v\n%#v\n\n", init[i], want[i])
	//}
}

func TestPart1(t *testing.T) {
	d, err := ReadData("input.txt")
	if err != nil {
		t.Fatal(err)
	}

	got := 0

	for step := 1; step <= 100; step++ {
		t.Run(fmt.Sprintf("step %d", step), func(t *testing.T) {
			got += RunStep(d)
		})

	}

	want := 1723
	if got != want {
		t.Errorf("want: %d, got: %d", want, got)
	}

}

func TestPart2(t *testing.T) {
	d, err := ReadData("input.txt")
	if err != nil {
		t.Fatal(err)
	}

	step := 0
	sz := len(d[0]) * len(d)

	for {
		step++
		got := RunStep(d)
		if got == sz {
			break
		}
	}

	wantStep := 327
	if step != wantStep {
		t.Errorf("got: %d, want: %d", step, wantStep)
	}
}

func TestRunStep(t *testing.T) {

	d, err := ReadData("test_data.txt")
	if err != nil {
		t.Fatal(err)
	}

	flashes := 0

	for step := 1; step <= 100; step++ {
		t.Run(fmt.Sprintf("step %d", step), func(t *testing.T) {
			flashes += RunStep(d)

			if wantBytes, ok := allTestData[step]; ok {
				want, _ := ParseData(wantBytes)
				if !cmp.Equal(d, want, cmp.AllowUnexported(cell{})) {
					t.Errorf(cmp.Diff(d, want, cmp.AllowUnexported(cell{})))
				}
			}

			t.Logf("flashes: %d", flashes)
			if step == 10 && flashes != 204 {
				t.Errorf("at step 10, expected 204 flashes, got %d", flashes)
			}

			if step == 100 && flashes != 1656 {
				t.Errorf("at step 100, expected 1656 flashes, got %d", flashes)
			}
		})
	}
}

var (
	allTestData = map[int][]byte{
		1: []byte(`6594254334
3856965822
6375667284
7252447257
7468496589
5278635756
3287952832
7993992245
5957959665
6394862637`),
		2: []byte(`8807476555
5089087054
8597889608
8485769600
8700908800
6600088989
6800005943
0000007456
9000000876
8700006848`),
		3: []byte(`0050900866
8500800575
9900000039
9700000041
9935080063
7712300000
7911250009
2211130000
0421125000
0021119000`),
		4: []byte(`2263031977
0923031697
0032221150
0041111163
0076191174
0053411122
0042361120
5532241122
1532247211
1132230211`),
		5: []byte(`4484144000
2044144000
2253333493
1152333274
1187303285
1164633233
1153472231
6643352233
2643358322
2243341322`),
		6: []byte(`5595255111
3155255222
3364444605
2263444496
2298414396
2275744344
2264583342
7754463344
3754469433
3354452433`),
		7: []byte(`6707366222
4377366333
4475555827
3496655709
3500625609
3509955566
3486694453
8865585555
4865580644
4465574644`),
		8: []byte(`7818477333
5488477444
5697666949
4608766830
4734946730
4740097688
6900007564
0000009666
8000004755
6800007755`),
		9: []byte(`9060000644
7800000976
6900000080
5840000082
5858000093
6962400000
8021250009
2221130009
9111128097
7911119976`),
		10: []byte(`0481112976
0031112009
0041112504
0081111406
0099111306
0093511233
0442361130
5532252350
0532250600
0032240000`),
		20: []byte(`3936556452
5686556806
4496555690
4448655580
4456865570
5680086577
7000009896
0000000344
6000000364
4600009543`),
		30: []byte(`0643334118
4253334611
3374333458
2225333337
2229333338
2276733333
2754574565
5544458511
9444447111
7944446119`),
		40: []byte(`6211111981
0421111119
0042111115
0003111115
0003111116
0065611111
0532351111
3322234597
2222222976
2222222762`),
		50: []byte(`9655556447
4865556805
4486555690
4458655580
4574865570
5700086566
6000009887
8000000533
6800000633
5680000538`),
		60: []byte(`2533334200
2743334640
2264333458
2225333337
2225333338
2287833333
3854573455
1854458611
1175447111
1115446111`),
		70: []byte(`8211111164
0421111166
0042111114
0004211115
0000211116
0065611111
0532351111
7322235117
5722223475
4572222754`),
		80: []byte(`1755555697
5965555609
4486555680
4458655580
4570865570
5700086566
7000008666
0000000990
0000000800
0000000000`),
		90: []byte(`7433333522
2643333522
2264333458
2226433337
2222433338
2287833333
2854573333
4854458333
3387779333
3333333333`),
		100: []byte(`0397666866
0749766918
0053976933
0004297822
0004229892
0053222877
0532222966
9322228966
7922286866
6789998766`),
	}
)
